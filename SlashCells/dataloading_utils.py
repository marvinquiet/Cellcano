'''
Load data for running celltyping experiments
'''
import os, sys
import numpy as np
from ATACseq.preprocess.process_train_test_data import *

from ATACseq.preprocess.process_sciCAR_train_test import *
from ATACseq.preprocess.process_10X_train_test import *
from ATACseq.preprocess.process_Greenleaf_train_test import *

### === process loaded data
def process_loaded_data(train_adata, test_adata, result_dir, 
        args=None, scale=True, plot=True, 
        min_genes=0, min_cells=0, 
        preprocess=True, log=True,
        save_raw=False, save_data=True, 
        ATACseq=False, quantile_norm=False):
    ## preprocess/log for testing harmony or dimension reducted result

    if args is None:
        sys.exit("Error: Please check your argument parser object!")

    # curate for common cell types
    common_celltypes = set(train_adata.obs["cell.type"]).intersection(set(test_adata.obs["cell.type"]))
    train_cells = train_adata.obs.loc[train_adata.obs["cell.type"].isin(common_celltypes)].index
    test_cells = test_adata.obs.loc[test_adata.obs["cell.type"].isin(common_celltypes)].index
    train_adata = train_adata[train_cells]
    test_adata = test_adata[test_cells]

    if save_raw:
        train_adata.layers["counts"] = train_adata.X.copy() 
        test_adata.layers["counts"] = test_adata.X.copy() 

    if ATACseq:
        ## run TFIDF
        train_adata = process_ATACseq_adata(train_adata, 
            min_regions=min_genes, preprocess=preprocess)
        test_adata = process_ATACseq_adata(test_adata, 
            min_regions=min_genes, preprocess=preprocess)
    else:
        ## feature selection
        train_adata, test_adata = feature_selection_train_test(train_adata, test_adata,
            result_dir, args.n_features, args.select_on, args.select_method,
            min_genes=min_genes, min_cells=min_cells, celltype_label="cell.type",
            preprocess=preprocess, log=log)

    if quantile_norm:
        adata = train_adata.concatenate(test_adata,join='inner',
            batch_key="dataset_batch",batch_categories=["train","test"]) #inner join
        adata_df = pd.DataFrame(adata.X.toarray()).T  ## rows are genes
        ## compute target function which is correct
        #rank_mean = adata_df.stack().groupby(adata_df.rank(method='first').stack().astype(int)).mean()
        ## change rank_mean to another target function generated by Poison log-normal distribution
        import random
        random.seed(2021)
        normal_samples = np.random.normal(loc=sum(adata_df == 0)/adata_df.shape[0]/adata_df.shape[1], scale=2, size=adata_df.shape[0])
        expnormal_samples = np.exp(normal_samples)
        rank_mean = np.random.poisson(expnormal_samples)

        ## try using it in column based way: https://github.com/ShawnLYU/Quantile_Normalize/blob/master/quantile_norm.py
        for col in adata_df:
            ix = adata_df[col].sort_values().index
            adata_df.loc[ix, col] = list(rank_mean)
        #adata_transformed = adata_df.rank(method='min').stack().astype(int).map(rank_mean).unstack()  ## somewhat wrongly

        ## explore whether the quantile normalization works
        import random
        random.seed(0)
        sampled_train_cells = random.sample(list(train_adata.obs_names), 20)
        random.seed(0)
        sampled_test_cells = random.sample(list(test_adata.obs_names), 20)

        sampled_train_adata = train_adata[sampled_train_cells]
        sampled_test_adata = test_adata[sampled_test_cells]
        sampled_train_df = pd.DataFrame(sampled_train_adata.X.toarray()).T
        sampled_test_df = pd.DataFrame(sampled_test_adata.X.toarray()).T
        plt.clf()
        sampled_train_df.plot.density()
        plt.savefig("train_before_qNorm.png")

        plt.clf()
        sampled_test_df.plot.density()
        plt.savefig("test_before_qNorm.png")

        adata.X = adata_df.T.to_numpy()
        train_adata = adata[adata.obs[adata.obs["dataset_batch"] == "train"].index.tolist()]
        test_adata = adata[adata.obs[adata.obs["dataset_batch"] == "test"].index.tolist()]

        #transformed_train_df = pd.DataFrame(train_adata[train_adata.obs["barcode"].isin(sampled_train_cells)].X.toarray()).T
        #transformed_test_df = pd.DataFrame(test_adata[test_adata.obs["barcode"].isin(sampled_test_cells)].X.toarray()).T
        #plt.clf()
        #transformed_train_df.plot.density()
        #plt.savefig("train_after_qNorm.png")

        #plt.clf()
        #transformed_test_df.plot.density()
        #plt.savefig("test_after_qNorm.png")

    ## scale and analze
    train_adata, test_adata = scale_and_visualize(train_adata, test_adata,
        result_dir, scale=scale, plot=plot)
    if save_data:
        save_adata(train_adata, test_adata, result_dir)

    return train_adata, test_adata


### === load sciCAR anndata
def load_sciCAR_adata(data_dir, args=None):
    train_adata, test_adata = None, None

    if args.data_source == "sciCAR_exprs_cv":
        train_adata, test_adata = \
            process_sciCAR_ge(data_dir, train_pct=float(args.train))
    if args.data_source == "sciCAR_exprs_twoGroupT_cv":
        train_adata, test_adata = \
            process_sciCAR_ge(data_dir, train_pct=float(args.train),
                    gene_file=data_dir+os.sep+'sciCAR_GSE117089/twoGroupT_markergenes.tsv')
    if args.data_source == "sciCAR_exprs_SC2P_Ftest_cv":
        train_adata, test_adata = \
            process_sciCAR_SC2P(data_dir, train_pct=float(args.train),
                    option="Ftest")
    if args.data_source == "sciCAR_exprs_SC2P_twoGroupT_cv":
        train_adata, test_adata = \
            process_sciCAR_SC2P(data_dir, train_pct=float(args.train),
                    option="twoGroupT")
    if args.data_source == "sciCAR_cv":
        train_adata, test_adata = \
            process_sciCAR_GA(data_dir, train_pct=float(args.train))

    ## sciCAR promoter counts
    if args.data_source == "sciCAR_promoter_cv":
        train_adata, test_adata = \
            process_sciCAR_promoter(data_dir, train_pct=float(args.train))
    if args.data_source == "sciCAR_promoter_Ftest_cv":
        train_adata, test_adata = \
            process_sciCAR_promoter(data_dir, train_pct=float(args.train),
                    gene_file=data_dir+os.sep+'sciCAR_GSE117089/F-test_markergenes.tsv')
    if args.data_source == "sciCAR_promoter_twoGroupT_cv":
       train_adata, test_adata = \
           process_sciCAR_promoter(data_dir, train_pct=float(args.train),
                   gene_file=data_dir+os.sep+'sciCAR_GSE117089/twoGroupT_markergenes.tsv')
    if args.data_source == "sciCAR_promoter_bin_Ftest_cv":
       train_adata, test_adata = \
           process_sciCAR_promoter(data_dir, train_pct=float(args.train),
                   gene_file=data_dir+os.sep+'sciCAR_GSE117089/F-test_markergenes.tsv', binarize=True)
    if args.data_source == "sciCAR_promoter_bin_twoGroupT_cv":
       train_adata, test_adata = \
           process_sciCAR_promoter(data_dir, train_pct=float(args.train),
                   gene_file=data_dir+os.sep+'sciCAR_GSE117089/twoGroupT_markergenes.tsv', binarize=True)

    ## sciCAR scATAC-seq transformation
    if args.data_source == "sciCAR_peaks_cv":
        train_adata, test_adata = \
            process_sciCAR_peaks(data_dir, train_pct=float(args.train))
    if args.data_source == "sciCAR_cusanovich_cv":
        train_adata, test_adata = \
            process_sciCAR_cusanovich(data_dir, train_pct=float(args.train))
    if args.data_source == "sciCAR_cisTopic_cv":
        train_adata, test_adata = \
            process_sciCAR_cisTopic(data_dir, train_pct=float(args.train))
    if args.data_source == "sciCAR_SnapATAC_raw_cv":
        train_adata, test_adata = \
            process_sciCAR_SnapATAC(data_dir, option="raw", train_pct=float(args.train))
    if args.data_source == "sciCAR_SnapATAC_filter_cv":
        train_adata, test_adata = \
            process_sciCAR_SnapATAC(data_dir, option="filter", train_pct=float(args.train))
    if args.data_source == "sciCAR_SnapATAC_PC_cv":
        train_adata, test_adata = \
            process_sciCAR_SnapATAC(data_dir, option="PC", train_pct=float(args.train))

    ## sciCAR use gene expression to predict promoter counts from scATAC-seq
    if args.data_source == "sciCAR_SC2P_to_promoter_Ftest":
        train_adata, test_adata = \
            process_sciCAR_SC2P_to_promoter(data_dir, option="Ftest")
    if args.data_source == "sciCAR_SC2P_to_promoter_twoGroupT":
        train_adata, test_adata = \
            process_sciCAR_SC2P_to_promoter(data_dir, option="twoGroupT")
    return train_adata, test_adata

### === load 10X anndata
def load_10X_adata(data_dir, args=None):
    train_adata, test_adata = None, None

    if args.data_source == "10XPBMC_SnapATAC_PC_cv":
        train_adata, test_adata = \
            process_10X_SnapATAC(data_dir, option="PC", train_pct=float(args.train))
    if args.data_source == "10XPBMC_SnapATAC_bin_cv":
        train_adata, test_adata = \
            process_10X_SnapATAC(data_dir, option="raw", train_pct=float(args.train))
    if args.data_source == "10XPBMC_peak_cv":
        train_adata, test_adata = \
            process_10X_peak(data_dir, train_pct=float(args.train))
    if args.data_source == "10XPBMC_ATACbin_major_cv":
        train_adata, test_adata = \
            process_10X_ATACbin(data_dir, train_pct=float(args.train))
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "10XPBMC_exprs_cv":
        train_adata, test_adata = \
            process_10X_ge(data_dir, train_pct=float(args.train))
    if args.data_source == "10XPBMC_exprs_major_cv":
        train_adata, test_adata = \
            process_10X_ge(data_dir, train_pct=float(args.train))
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "10XPBMC_exprs_twoGroupT_cv":
        train_adata, test_adata = \
            process_10X_ge(data_dir, gene_opt="twoGroupT", train_pct=float(args.train))
    if args.data_source == "10XPBMC_exprs_SC2PtwoGroupT_cv":
        train_adata, test_adata = \
            process_10X_ge_SC2P(data_dir, gene_opt="twoGroupT", train_pct=float(args.train))

    if args.data_source == "10XPBMC_cusanovich_cv":
        train_adata, test_adata = \
            process_10X_cusanovich(data_dir, train_pct=float(args.train))
    if args.data_source == "10XPBMC_promoter_cv":
        train_adata, test_adata = \
            process_10X_promoter(data_dir, train_pct=float(args.train))
    if args.data_source == "10XPBMC_promoter_twoGroupT_cv":
        train_adata, test_adata = \
            process_10X_promoter(data_dir, gene_opt="twoGroupT", train_pct=float(args.train))
    if args.data_source == "10XPBMC_promoter_bin_cv":
        train_adata, test_adata = \
            process_10X_promoter(data_dir, train_pct=float(args.train),
                    binarize=True)
    if args.data_source == "10XPBMC_promoter_bin_twoGroupT_cv":
        train_adata, test_adata = \
            process_10X_promoter(data_dir, gene_opt="twoGroupT", train_pct=float(args.train),
                    binarize=True)
    if args.data_source == "10XPBMC_ga_cv":
        train_adata, test_adata = \
            process_10X_ga(data_dir, train_pct=float(args.train))
    if args.data_source == "10XPBMC_ga_twoGroupT_cv":
        train_adata, test_adata = \
            process_10X_ga(data_dir, gene_opt="twoGroupT", train_pct=float(args.train))
    if args.data_source == "10XPBMC_cisTopic_cv":
        train_adata, test_adata = \
            process_10X_cisTopic(data_dir, train_pct=float(args.train))
    if args.data_source == "10XPBMC_Seuratimputed_to_ga":
        train_adata, test_adata = \
            process_10X_Seurat_imputed(data_dir, opt="ga")
    if args.data_source == "10XPBMC_Seuratimputed_to_promoter":
        train_adata, test_adata = \
            process_10X_Seurat_imputed(data_dir, opt="promoter")
    if args.data_source == "10XPBMC_SeuratWKNN_cv":
        train_adata, test_adata = \
            process_10X_Seurat_NNweights(data_dir, opt="WKNN", train_pct=float(args.train))
    if args.data_source == "10XPBMC_SeuratWSNN_cv":
        train_adata, test_adata = \
            process_10X_Seurat_NNweights(data_dir, opt="WSNN", train_pct=float(args.train))
    if args.data_source == "10XPBMC_ArchRgenescore_cv":
        train_adata, test_adata = \
            process_10X_ArchRgenescore(data_dir, train_pct=float(args.train))
    if args.data_source == "10XPBMC_ArchRgenescore_major_cv":
        train_adata, test_adata = \
            process_10X_ArchRgenescore(data_dir, train_pct=float(args.train))
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)

    ## SC2P gene expression to predict binarized promoter
    if args.data_source == "10XPBMC_SC2P_to_binpromoter_twoGroupT":
        train_adata, test_adata = \
            process_10X_SC2P_to_binpromoter(data_dir, gene_opt="twoGroupT")
    if args.data_source == "10XPBMC_exprs_to_promoter_twoGroupT":
        train_adata, test_adata = \
            process_10X_exprs_to_promoter(data_dir, gene_opt="twoGroupT")
    if args.data_source == "10XPBMC_exprs_to_ArchRgenemodel":
        train_adata = load_10X_data.load_10XPBMC_ge(data_dir)
        test_adata = load_10X_data.load_10XPBMC_ArchRgenescore(data_dir)
        common_genes = set(train_adata.var_names).intersection(set(test_adata.var_names))
        train_adata = train_adata[:, list(common_genes)]
        test_adata = test_adata[:, list(common_genes)]
    if args.data_source == "10XPBMC_exprs_to_ArchRgenemodel_major":
        train_adata = load_10X_data.load_10XPBMC_ge(data_dir)
        test_adata = load_10X_data.load_10XPBMC_ArchRgenescore(data_dir)
        common_genes = set(train_adata.var_names).intersection(set(test_adata.var_names))
        train_adata = train_adata[:, list(common_genes)]
        test_adata = test_adata[:, list(common_genes)]
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)
 
    return train_adata, test_adata

def load_Greenleaf_adata(data_dir, args=None):
    train_adata, test_adata = None, None

    if args.data_source == "immunePBMC_genescore":
        train_adata, test_adata = \
            process_immunePBMC_genescore(data_dir, ind1=args.train, ind2=args.test)
    if args.data_source == "immunePBMC_genescore_major":
        train_adata, test_adata = \
            process_immunePBMC_genescore(data_dir, ind1=args.train, ind2=args.test)
        train_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "immunePBMC_genescore_major_cv":
        train_adata, test_adata = \
            process_immunePBMC_genescore_cv(data_dir, ind=args.train, pct=float(args.test))
        train_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "immunePBMC_ATACbin":
        train_adata, test_adata = \
            process_immunePBMC_ATACbins(data_dir, ind1=args.train, ind2=args.test)
    if args.data_source == "immunePBMC_ATACbin_major":
        train_adata, test_adata = \
            process_immunePBMC_ATACbins(data_dir, ind1=args.train, ind2=args.test)
        train_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "immunePBMC_ciceroGA":
        train_adata, test_adata = \
            process_immunePBMC_ciceroGA(data_dir, ind1=args.train, ind2=args.test)
    if args.data_source == "immunePBMC_SnapATAC_harmony":
        train_adata, test_adata = \
            process_immunePBMC_SnapATAC(data_dir, ind1=args.train, ind2=args.test, harmony=True)
    if args.data_source == "immunePBMC_SnapATAC_noharmony":
        train_adata, test_adata = \
            process_immunePBMC_SnapATAC(data_dir, ind1=args.train, ind2=args.test, harmony=False)
 
    if args.data_source == "AMLPBMC_genescore":
        train_adata, test_adata = \
            process_AMLPBMC_genescore(data_dir, ind1=args.train, ind2=args.test)
    if args.data_source == "AMLPBMC_genescore_major":
        train_adata, test_adata = \
            process_AMLPBMC_genescore(data_dir, ind1=args.train, ind2=args.test)
        train_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "AMLPBMC_genescore_major_cv":
        train_adata, test_adata = \
            process_AMLPBMC_genescore_cv(data_dir, ind=args.train, pct=float(args.test))
        train_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(test_adata, celltype_gran=0)
 

    if args.data_source == "AMLPBMC_ATACbin":
        train_adata, test_adata = \
            process_AMLPBMC_ATACbins(data_dir, ind1=args.train, ind2=args.test)
    if args.data_source == "AMLPBMC_ATACbin_major":
        train_adata, test_adata = \
            process_AMLPBMC_ATACbins(data_dir, ind1=args.train, ind2=args.test)
        train_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(test_adata, celltype_gran=0)
 
    return train_adata, test_adata


def load_crossdataset_ATACbin_adata(data_dir, args=None):
    train_adata, test_adata = None, None

    from ATACseq.preprocess import load_Greenleaf_data
    from ATACseq.preprocess import load_10X_data
    ## load three datasets with PBMC
    if args.data_source == "immunePBMC_to_AMLPBMC_ATACbin":
        train_adata = load_Greenleaf_data.load_immunePBMC_ATACbins(data_dir, ind=args.train)
        train_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_AMLPBMC_ATACbins(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "AMLPBMC_to_immunePBMC_ATACbin":
        train_adata = load_Greenleaf_data.load_AMLPBMC_ATACbins(data_dir, ind=args.train)
        train_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_immunePBMC_ATACbins(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "10XPBMC_to_immunePBMC_ATACbin":
        train_adata = load_10X_data.load_10XPBMC_ATACbins(data_dir)
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_immunePBMC_ATACbins(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "10XPBMC_to_AMLPBMC_ATACbin":
        train_adata = load_10X_data.load_10XPBMC_ATACbins(data_dir)
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_AMLPBMC_ATACbins(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "immunePBMC_to_10XPBMC_ATACbin":
        train_adata = load_Greenleaf_data.load_immunePBMC_ATACbins(data_dir, ind=args.train)
        train_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_10X_data.load_10XPBMC_ATACbins(data_dir)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "AMLPBMC_to_10XPBMC_ATACbin":
        train_adata = load_Greenleaf_data.load_AMLPBMC_ATACbins(data_dir, ind=args.train)
        train_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_10X_data.load_10XPBMC_ATACbins(data_dir)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)
    return train_adata, test_adata

def load_crossdataset_genescore_adata(data_dir, args=None):
    ## predict gene score cross datasets
    train_adata, test_adata = None, None
    from ATACseq.preprocess import load_Greenleaf_data
    from ATACseq.preprocess import load_10X_data
 
    if args.data_source == "immunePBMC_to_AMLPBMC_genescore":
        train_adata = load_Greenleaf_data.load_immunePBMC_genescore(data_dir, ind=args.train)
        train_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_AMLPBMC_genescore(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "AMLPBMC_to_immunePBMC_genescore":
        train_adata = load_Greenleaf_data.load_AMLPBMC_genescore(data_dir, ind=args.train)
        train_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_immunePBMC_genescore(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "10XPBMC_to_immunePBMC_genescore":
        train_adata = load_10X_data.load_10XPBMC_genescore(data_dir)
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_immunePBMC_genescore(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "10XPBMC_to_AMLPBMC_genescore":
        train_adata = load_10X_data.load_10XPBMC_genescore(data_dir)
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_AMLPBMC_genescore(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "immunePBMC_to_10XPBMC_genescore":
        train_adata = load_Greenleaf_data.load_immunePBMC_genescore(data_dir, ind=args.train)
        train_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_10X_data.load_10XPBMC_genescore(data_dir)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)
    if args.data_source == "AMLPBMC_to_10XPBMC_genescore":
        train_adata = load_Greenleaf_data.load_AMLPBMC_genescore(data_dir, ind=args.train)
        train_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_10X_data.load_10XPBMC_genescore(data_dir)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)

    ## === gene expression to predict gene score
    if "10XPBMC_exprs_to_10XPBMC_genescore" in args.data_source:
        train_adata = load_10X_data.load_10XPBMC_ge(data_dir)
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_10X_data.load_10XPBMC_genescore(data_dir)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)
    if "10XPBMC_exprs_to_immunePBMC_genescore" in args.data_source:
        train_adata = load_10X_data.load_10XPBMC_ge(data_dir)
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_immunePBMC_genescore(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_immunePBMC_celltypes(test_adata, celltype_gran=0)
    if "10XPBMC_exprs_to_AMLPBMC_genescore" in args.data_source:
        train_adata = load_10X_data.load_10XPBMC_ge(data_dir)
        train_adata = load_10X_data.curate_10XPBMC_celltypes(train_adata, celltype_gran=0)
        test_adata = load_Greenleaf_data.load_AMLPBMC_genescore(data_dir, ind=args.test)
        test_adata = load_Greenleaf_data.curate_AMLPBMC_celltypes(test_adata, celltype_gran=0)

    ## === combined PBMC individuals from Greenleaf to predict 10X
    if "combined_GreenleafPBMC_to_10X" in args.data_source:
        test_adata = load_10X_data.load_10XPBMC_genescore(data_dir)
        test_adata = load_10X_data.curate_10XPBMC_celltypes(test_adata, celltype_gran=0)
        train_adata = load_Greenleaf_data.load_Greenleaf_genescore(data_dir, ind=args.train)
 
    return train_adata, test_adata

